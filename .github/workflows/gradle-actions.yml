# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build_and_test:
    name: Build gradle
    runs-on: ubuntu-latest
    steps:

    - name: Checkout Code with .yml
      uses: actions/checkout@v3
      with:
        token: ${{ secrets.ACTION_TOKEN }}
        submodules: true

      # java 환경 설정
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'

    - name: gradle Cache
      uses: actions/cache@v3.3.2
      with:
        # 캐싱할 파일이 있는 경로와 복구할 경로
        path: 
          ~/.gradle/caches
          ~/.gradle/wrapper
        # 캐시 복원 및 저장을 위한 키
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        # 키에 대해 캐시 적중이 발생하지 않은 경우 오래된 캐시를 복원하는 데 사용할 키의 순서가 매겨진 목록. 이 경우 'cache-hit'은 false를 반환
        restore-keys: | # optional
          ${{ runner.os }}-gradle-

    # gradlew 권한 부여
    - name: Grant execute permission for gradlew
      run: chmod +x ./gradlew

    # gradle jar 빌드
    - name: Build with Gradle
      run: ./gradlew clean build
  
    # docker hub 접속을 위한 로그인
    - name: Login to Docker hub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_PASSWORD }}

    # docker 이미지 빌드
    - name: Build Docker Image
      run: |
        pwd
        ls -al
        docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/sns-project:${{ github.sha }} .

    # docker hub에 이미지 올리기
    - name: Push Docker Image to Docker hub
      run: docker push ${{ secrets.DOCKER_HUB_USERNAME }}/sns-project:${{ github.sha }}

      
